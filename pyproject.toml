[build-system]
requires = [
    "setuptools>=64",
    "wheel",
    # On Windows, use the CasADi vcpkg registry and CMake bundled from MSVC
    "casadi>=3.6.7; platform_system!='Windows'",
    # Note: the version of CasADi as a build-time dependency should be matched
    # across platforms, so updates to its minimum version here should be accompanied
    # by a version bump in https://github.com/pybamm-team/casadi-vcpkg-registry.
    "cmake; platform_system!='Windows'",
]
build-backend = "setuptools.build_meta"

[project]
name = "pybamm"
version = "24.11.2"
license = { file = "LICENSE.txt" }
description = "Python Battery Mathematical Modelling"
authors = [{name = "The PyBaMM Team", email = "pybamm@pybamm.org"}]
maintainers = [{name = "The PyBaMM Team", email = "pybamm@pybamm.org"}]
requires-python = ">=3.9, <3.13"
readme = {file = "README.md", content-type = "text/markdown"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "numpy>=1.23.5,<2.0.0",
    "scipy>=1.11.4",
    "casadi>=3.6.7",
    "xarray>=2022.6.0",
    "anytree>=2.8.0",
    "sympy>=1.12",
    "typing-extensions>=4.10.0",
    "pandas>=1.5.0",
    "pooch>=1.8.1",
    "posthog",
    "pyyaml",
    "platformdirs",
]

[project.urls]
Homepage = "https://pybamm.org"
Documentation = "https://docs.pybamm.org"
Repository = "https://github.com/pybamm-team/PyBaMM"
Releases = "https://github.com/pybamm-team/PyBaMM/releases"
Changelog = "https://github.com/pybamm-team/PyBaMM/blob/develop/CHANGELOG.md"

[project.optional-dependencies]
docs = [
    "sphinx>=6",
    "sphinx_rtd_theme>=0.5",
    "pydata-sphinx-theme",
    "sphinx_design",
    "sphinx-copybutton",
    "myst-parser",
    "sphinx-inline-tabs",
    "sphinxcontrib-bibtex",
    "sphinx-autobuild",
    "sphinx-last-updated-by-git",
    "nbsphinx",
    "ipykernel",
    "ipywidgets",
    "sphinx-gallery",
    "sphinx-hoverxref",
    "sphinx-docsearch",
]
# For example notebooks
examples = [
    "jupyter",
]
plot = [
    "imageio>=2.3.0",
    # Note: matplotlib is loaded for debug plots, but to ensure PyBaMM runs
    # on systems without an attached display, it should never be imported
    # outside of plot() methods.
    "matplotlib>=3.6.0",
]
cite = [
    "setuptools", # Fix for a pybtex issue
    "pybtex>=0.24.0",
]
# Battery Parameter eXchange format
bpx = [
    "bpx>=0.4.0",
]
# Low-overhead progress bars
tqdm = [
    "tqdm",
]
dev = [
    # For working with pre-commit hooks
    "pre-commit",
    # For code style checks: linting and auto-formatting
    "ruff",
    # For running testing sessions
    "nox",
    # For coverage
    "pytest-cov",
    # For doctest
    "pytest-doctestplus",
    # pytest and its plugins
    "pytest>=6",
    "pytest-xdist",
    "pytest-mock",
    "pytest-subtests",
    # For testing Jupyter notebooks
    "nbmake",
    # To access the metadata for python packages
    "importlib-metadata; python_version < '3.10'",
]
# For the Jax solver.
# Note: These must be kept in sync with the versions defined in pybamm/util.py, and
#       must remain compatible with IREE (see noxfile.py for IREE compatibility).
jax = [
    "jax==0.4.27",
    "jaxlib==0.4.27",
]
# For MLIR expression evaluation (IDAKLU Solver)
iree = [
    # must be pip installed with --find-links=https://iree.dev/pip-release-links.html
    "iree-compiler==20240507.886",  # see IREE compatibility notes in noxfile.py
]
# Contains all optional dependencies, except for jax, iree, and dev dependencies
all = [
    "scikit-fem>=8.1.0",
    "pybamm[examples,plot,cite,bpx,tqdm]",
]

[project.entry-points."pybamm_parameter_sets"]
Sulzer2019 = "pybamm.input.parameters.lead_acid.Sulzer2019:get_parameter_values"
Ai2020 = "pybamm.input.parameters.lithium_ion.Ai2020:get_parameter_values"
Chen2020 = "pybamm.input.parameters.lithium_ion.Chen2020:get_parameter_values"
Chen2020_composite = "pybamm.input.parameters.lithium_ion.Chen2020_composite:get_parameter_values"
Ecker2015 = "pybamm.input.parameters.lithium_ion.Ecker2015:get_parameter_values"
Ecker2015_graphite_halfcell = "pybamm.input.parameters.lithium_ion.Ecker2015_graphite_halfcell:get_parameter_values"
Marquis2019 = "pybamm.input.parameters.lithium_ion.Marquis2019:get_parameter_values"
Mohtat2020 = "pybamm.input.parameters.lithium_ion.Mohtat2020:get_parameter_values"
NCA_Kim2011 = "pybamm.input.parameters.lithium_ion.NCA_Kim2011:get_parameter_values"
OKane2022 = "pybamm.input.parameters.lithium_ion.OKane2022:get_parameter_values"
OKane2022_graphite_SiOx_halfcell = "pybamm.input.parameters.lithium_ion.OKane2022_graphite_SiOx_halfcell:get_parameter_values"
ORegan2022 = "pybamm.input.parameters.lithium_ion.ORegan2022:get_parameter_values"
Prada2013 = "pybamm.input.parameters.lithium_ion.Prada2013:get_parameter_values"
Ramadass2004 = "pybamm.input.parameters.lithium_ion.Ramadass2004:get_parameter_values"
Xu2019 = "pybamm.input.parameters.lithium_ion.Xu2019:get_parameter_values"
ECM_Example = "pybamm.input.parameters.ecm.example_set:get_parameter_values"
MSMR_Example = "pybamm.input.parameters.lithium_ion.MSMR_example_set:get_parameter_values"
Chayambuka2022 = "pybamm.input.parameters.sodium_ion.Chayambuka2022:get_parameter_values"

[tool.setuptools]
include-package-data = true

# List of files to include as package data. These are mainly the parameter CSV files in
# the input/parameters/ subdirectories. Other files such as the CITATIONS file, relevant
# README.md files, and specific .txt files inside the pybamm/ directory are also included.
# These are specified to be included in the SDist through MANIFEST.in.
[tool.setuptools.package-data]
pybamm = [
    "*.txt",
    "*.md",
    "*.csv",
    "*.py",
    "src/pybamm/CITATIONS.bib",
    "src/pybamm/plotting/mplstyle",
]

[tool.setuptools.packages.find]
where = ["src"]
[tool.ruff]
extend-include = ["*.ipynb"]
extend-exclude = ["__init__.py"]

[tool.ruff.lint]
extend-select = [
    "B",             # flake8-bugbear
    # "I",           # isort
    # "ARG",         # flake8-unused-arguments
    # "C4",          # flake8-comprehensions
    # "ICN",         # flake8-import-conventions
    # "ISC",         # flake8-implicit-str-concat
    # "PGH",         # pygrep-hooks
    # "PIE",         # flake8-pie
    # "PL",          # pylint
    # "PT",          # flake8-pytest-style
    # "PTH",         # flake8-use-pathlib
    # "RET",         # flake8-return
    "RUF",           # Ruff-specific
    # "SIM",         # flake8-simplify
    # "T20",         # flake8-print
    "UP",            # pyupgrade
    "YTT",           # flake8-2020
    "TID252",        # relative-imports
    "S101",          # to identify use of assert statement
    "PT027",         # remove unittest style assertion
    "PT009",         # Use pytest.raises instead of unittest-style
]
ignore = [
    "E741",        # Ambiguous variable name
    "RUF012",      # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM108",      # Use ternary operator
    "ARG001",      # Unused function argument:
    "ARG002",      # Unused method arguments
    "PLR2004",     # Magic value used in comparison
    "PLR0915",     # Too many statements
    "PLR0913",     # Too many arguments
    "PLR0912",     # Too many branches
    "RET504",      # Unnecessary assignment
    "RET505",      # Unnecessary `else`
    "RET506",      # Unnecessary `elif`
    "B018",        # Found useless expression
    "RUF002",      # Docstring contains ambiguous
    "UP007",       # For pyupgrade
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "S101"]
"docs/*" = ["T20"]
"examples/*" = ["T20"]
"**.ipynb" = ["E402", "E703"]
"docs/source/examples/notebooks/models/lithium-plating.ipynb" = ["F821"]

[tool.pytest.ini_options]
minversion = "8"
# Use pytest-xdist to run tests in parallel by default, exit with
# error if not installed
required_plugins = [
    "pytest-xdist",
    "pytest-mock",
    "pytest-subtests",
]
norecursedirs = 'pybind11*'
addopts = [
    "-nauto",
    "-vra",
    "--strict-config",
    "--strict-markers",
]
testpaths = [
    "tests",
]
console_output_style = "progress"
xfail_strict = true
filterwarnings = [
    "error",
    # ignore internal nbmake warnings
    'ignore:unclosed \<socket.socket:ResourceWarning',
    'ignore:unclosed event loop \<:ResourceWarning',
    # ignore warnings generated while running tests
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
]

# Logging configuration
log_cli = "true"
log_cli_level = "INFO"
log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["src/pybamm"]
concurrency = ["multiprocessing"]

[tool.repo-review]
ignore = [
    "PP003"  # list wheel as a build-dep
]

[tool.mypy]
ignore_missing_imports = true
allow_redefinition = true
disable_error_code = ["call-overload", "operator"]

[[tool.mypy.overrides]]
module = [
        "pybamm.models.base_model.*",
        "pybamm.models.full_battery_models.base_battery_model.*"
        ]
disable_error_code = "attr-defined"
